#!/usr/bin/env bash

set -o nounset
#set -o errexit

# version 2.2

# originally started with a new script file from scratch
# called depth, as I changed the approach to the problem
# by realising it's more efficient to rename directories
# and files starting at the greatest depth of the di-
# rectory tree and go backwards to the least at the top
# of it.

basedir="$1"
compswitch="$2"

logdir="${basedir}/logs"
lslogdir="${logdir}/lslogs"
proctimesdir="${logdir}/exectimes_logs"

startscr_unix=$(tsf)
startscr_ts="$(date --iso-8601=ns -d @${startscr_unix})"
scrtimelog="${proctimesdir}/script_proctimes"

maxdepthdir=$(printf '%d\n' "$(cd "${basedir}" && find . -mindepth 0 -type d -printf '%d\n' | sort -rn | head -1)")

if [[ ! -d "${logdir}" ]]; then
	mkdir -p "${logdir}"
	mkdir -p "${lslogdir}"
	mkdir -p "${proctimesdir}"
fi

END=${maxdepthdir}

# log function

logf () {
	printf 'start time: %s\n' "${logf_starttime_ts}" > "${logf_timelog}"
	printf 'finish time: %s\n' "${logf_finishtime_ts}" >> "${logf_timelog}"
	
	for (( k = 0; k <= 2; k++ )); do
		if [[ $k -eq 0 ]]; then
			measure="seconds"
		elif [[ $k -eq 1 ]]; then
			measure="minutes"
		else
			measure="hours"
		fi

		proctime=$(source prtime $k ${logf_starttime} ${logf_finishtime})
		printf '%s: %s %s\n' "${logf_timelog_string}" "${proctime}" "${measure}"  >> "${logf_timelog}"
	done
}

# dirs

dirmv () {
	dirmv_start=$(tsf)
	dirmv_start_ts="$(date --iso-8601=ns -d @${dirmv_start})"
	dirmv_timelog="${proctimesdir}/dirmv_timestamps"
	for (( i = 0; i <= $END; i++ )); do
		depthdirstart=$(tsf)
		depthdirstart_ts="$(date --iso-8601=ns -d @${depthdirstart})"
		
		depthlist="${lslogdir}/depth_$i"
		depthdir_timelog="${proctimesdir}/depthdir_timelog_$i"
		
		find "${basedir}" -mindepth $i -maxdepth $i -type d -not -path "${logdir}" | sort -n > "${depthlist}"
		
		depthdirend=$(tsf)
		depthdirend_ts="$(date --iso-8601=ns -d @${depthdirend})"

		logf_starttime=${depthdirstart}
		logf_finishtime=${depthdirend}
		logf_starttime_ts="${depthdirstart_ts}"
		logf_finishtime_ts="${depthdirend_ts}"
		logf_timelog="${depthdir_timelog}"
		logf_timelog_string="total running time incremental directories depth"

		logf ${logf_starttime} ${logf_finishtime} "${logf_starttime_ts}" "${logf_finishtime_ts}" "${logf_timelog}" "${logf_timelog_string}"
	done

	for (( i = $END; i >= 0; i-- )); do
		renamedirstart=$(tsf)
		renamedirstart_ts="$(date --iso-8601=ns -d @${renamedirstart})"
		renamedir_timelog="${proctimesdir}/renamedir_timelog_0_$i"
		while IFS= read -r aline; do
			targetbase="$(printf '%s\n' "$aline" | sed 's/\/[^/]*$//')"
			targetfilename=$(printf '%s\n' "$aline" | sed 's/^[^:]*[/]//' | sed 's/!//g;s/@//g;s/#//g;s/\$//g;s/%//g;s/\^//g;s/&//g;s/*//g;s/(//g;s/)//g;s/-//g;s/,//g;s/\[//g;s/\]//g;s/{//g;s/}//g' | sed "s/'//g" | sed "s/ /_/g;s/\(.*\)/\L\1/g" | sed 's/\.//2g')
			targetfilepath="${targetbase}/${targetfilename}"
				if [[ "$aline" != "${targetfilepath}" ]]; then
					mv -v "$aline" "${targetfilepath}"
				fi
		done < "${lslogdir}/depth_$i"


		renamedirend=$(tsf)
		renamedirend_ts="$(date --iso-8601=ns -d @${renamedirend})"

		logf_starttime=${renamedirstart}
		logf_finishtime=${renamedirend}
		logf_starttime_ts="${renamedirstart_ts}"
		logf_finishtime_ts="${renamedirend_ts}"
		logf_timelog="${renamedir_timelog}"
		logf_timelog_string="total running time rename directories"

		logf ${logf_starttime} ${logf_finishtime} "${logf_starttime_ts}" "${logf_finishtime_ts}" "${logf_timelog}" "${logf_timelog_string}"
	done

	dirmv_end=$(tsf)
	dirmv_end_ts="$(date --iso-8601=ns -d @${dirmv_end})"

	logf_starttime=${dirmv_start}
	logf_finishtime=${dirmv_end}
	logf_starttime_ts="${dirmv_start_ts}"
	logf_finishtime_ts="${dirmv_end_ts}"
	logf_timelog="${dirmv_timelog}"
	logf_timelog_string="total running time dirmv function"

	logf ${logf_starttime} ${logf_finishtime} "${logf_starttime_ts}" "${logf_finishtime_ts}" "${logf_timelog}" "${logf_timelog_string}"
}

# files

filemv () {
	filemv_start_unix=$(tsf)
	filemv_start_ts="$(date --iso-8601=ns -d @${filemv_start_unix})"
	filemv_timelog="${proctimesdir}/filemv_proctimeslog"
	find "${basedir}" -mindepth 0 -type f -not -path "${logdir}" | sort -n > "${lslogdir}/filedepth0"
	filerenamed="${lslogdir}/filedepth1_renamed"
	fileunchanged="${lslogdir}/filedepth1_unchanged"
	filelstimelog="${proctimesdir}/filedepth0_renamed_proctimeslog"
	touch "${filerenamed}"
	touch "${filelstimelog}"

	while IFS= read -r fileline; do
		rnmfile_start_unix=$(tsf)
		rnmfile_start_ts="$(date --iso-8601=ns -d @${rnmfile_start_unix})"
		
		rootfiledir="$(printf '%s\n' "$fileline" | sed 's/\/[^/]*$//')"
		rootfilename01_full="$(printf '%s\n' "$fileline" | sed 's/^[^:]*[/]//')"
		rootfilename02_base="$(printf '%s\n' "${rootfilename01_full}" | sed 's/\.[^\.]*$//')"
		
		rootformat01_test=$(printf '%s\n' "${rootfilename01_full}" | awk -F "." '{print NF-1}')
		if [[ ${rootformat01_test} -ne 0 ]]; then
			rootformat="$(printf '%s\n' "${rootfilename01_full}" | sed 's/.*\././')"
		fi
		
		targetfilename01_base="$(printf '%s\n' "${rootfilename02_base}" | sed 's/!//g;s/@//g;s/#//g;s/\$//g;s/%//g;s/\^//g;s/&//g;s/*//g;s/(//g;s/)//g;s/-//g;s/,//g;s/\[//g;s/\]//g;s/{//g;s/}//g' | sed "s/'//g" | sed "s/ /_/g;s/\(.*\)/\L\1/g" | sed 's/\.//2g')"
		
		if [[ ${rootformat01_test} -eq 0 ]]; then
			targetfilename02_full="${targetfilename01_base}"
		else
			targetfilename02_full="${targetfilename01_base}${rootformat}"
		fi
		
		targetfilepath="${rootfiledir}/${targetfilename02_full}"
		
		if [[ "$fileline" != "${targetfilepath}" ]]; then
			mv -v "$fileline" "${targetfilepath}"
			rnmfile_end_unix=$(tsf)
			rnmfile_end_ts="$(date --iso-8601=ns -d @${rnmfile_end_unix})"
			rnmfileproctime_real=$(source prtime 0 ${rnmfile_start_unix} ${rnmfile_end_unix})
			printf '%s - %s seconds - %s\n' "${rnmfile_end_ts}" "${rnmfileproctime_real}" "${targetfilepath}" >> "${filerenamed}"
		else
			rnmfile_end_unix=$(tsf)
			rnmfile_end_ts="$(date --iso-8601=ns -d @${rnmfile_end_unix})"
			rnmfileproctime_real=$(source prtime 0 ${rnmfile_start_unix} ${rnmfile_end_unix})
			printf '%s - %s seconds - %s\n' "${rnmfile_end_ts}" "${rnmfileproctime_real}" "$fileline" >> "${fileunchanged}"
		fi
	done < "${lslogdir}/filedepth0"
	
	filemv_end_unix=$(tsf)
	filemv_end_ts="$(date --iso-8601=ns -d @${filemv_end_unix})"

	logf_starttime=${filemv_start_unix}
	logf_finishtime=${filemv_end_unix}
	logf_starttime_ts="${filemv_start_ts}"
	logf_finishtime_ts="${filemv_end_ts}"
	logf_timelog="${filemv_timelog}"
	logf_timelog_string="total running time filemv function"

	logf ${logf_starttime} ${logf_finishtime} "${logf_starttime_ts}" "${logf_finishtime_ts}" "${logf_timelog}" "${logf_timelog_string}"
}

scrmode () {
	case "$compswitch" in
		directories)
			dirmv
			;;
		dirsfiles)
			dirmv
			filemv
			;;
	esac
}

scrmode "${compswitch}"

endscr_unix=$(tsf)
endscr_ts="$(date --iso-8601=ns -d @${endscr_unix})"

logf_starttime=${startscr_unix}
logf_finishtime=${endscr_unix}
logf_starttime_ts="${startscr_ts}"
logf_finishtime_ts="${endscr_ts}"
logf_timelog="${scrtimelog}"
logf_timelog_string="total running time rename dirs/files recursively script"

logf ${logf_starttime} ${logf_finishtime} "${logf_starttime_ts}" "${logf_finishtime_ts}" "${logf_timelog}" "${logf_timelog_string}"
